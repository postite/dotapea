package node.crypto;

/**
	SPKAC is a Certificate Signing Request mechanism originally implemented by
	Netscape and was specified formally as part of HTML5's `keygen` element.
	
	`<keygen>` is deprecated since [HTML 5.2](https://www.w3.org/TR/html52/changes.html#features-removed) and new projects
	should not use this element anymore.
	
	The `node:crypto` module provides the `Certificate` class for working with SPKAC
	data. The most common usage is handling output generated by the HTML5`<keygen>` element. Node.js uses [OpenSSL's SPKAC
	implementation](https://www.openssl.org/docs/man3.0/man1/openssl-spkac.html) internally.
**/
@:jsRequire("crypto", "Certificate") extern class Certificate {
	function new();
	function exportChallenge(spkac:BinaryLike):node.buffer.Buffer;
	function exportPublicKey(spkac:BinaryLike, ?encoding:String):node.buffer.Buffer;
	function verifySpkac(spkac:global.nodejs.ArrayBufferView):Bool;
	static var prototype : Certificate;
	/**
		```js
		const { Certificate } = await import('node:crypto');
		const spkac = getSpkacSomehow();
		const challenge = Certificate.exportChallenge(spkac);
		console.log(challenge.toString('utf8'));
		// Prints: the challenge as a UTF8 string
		```
	**/
	@:native("exportChallenge")
	static function exportChallenge_(spkac:BinaryLike):node.buffer.Buffer;
	/**
		```js
		const { Certificate } = await import('node:crypto');
		const spkac = getSpkacSomehow();
		const publicKey = Certificate.exportPublicKey(spkac);
		console.log(publicKey);
		// Prints: the public key as <Buffer ...>
		```
	**/
	@:native("exportPublicKey")
	static function exportPublicKey_(spkac:BinaryLike, ?encoding:String):node.buffer.Buffer;
	/**
		```js
		import { Buffer } from 'node:buffer';
		const { Certificate } = await import('node:crypto');
		
		const spkac = getSpkacSomehow();
		console.log(Certificate.verifySpkac(Buffer.from(spkac)));
		// Prints: true or false
		```
	**/
	@:native("verifySpkac")
	static function verifySpkac_(spkac:global.nodejs.ArrayBufferView):Bool;
}